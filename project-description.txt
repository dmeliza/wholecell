Project description:
CVS: $Id$

WholeCell is a matlab-based data acquisition and analysis program. It is
based to some extent on PClamp (Axon Instruments) and Exper (Zach Mainen,
CSHL), but is more of a one-off design intended for controlling an
AxoClamp amplifier and stimulus presentation equipment.

Because the stimulus presentation parameters and the analysis is going to
vary from experiment to experiment, the design of the project is based
around a central application that controls the national instruments board
and runs protocols, which are matlab files that make use of instruments
accessed through the national instruments board via the main application.

Like exper there is a central control structure which is made available
globally to protocol files.  Unlike exper, protocols cannot operate
independently of one another, and thus there is no precendence of
operation.

This control structure is stored as the global variable "wc".  Some relevant
fields:

wc.ai - analog input object
wc.ao - analog output object
wc.(modulename) - data used within a protocol

A number of utility functions are provided for manipulation of values within
this parameter structure.  There are two kinds of parameters, Params and UIParams.
UIParams are backed by a GUI object somewhere in Matlab's object hierarchy.  The
handle of this object is stored in the parameter structure, and calls to GetUIParam
or SetUIParam manipulate or retrieve the value using get() and set() commands.  User
manipulation of the graphical element is directly reflected in subsequent calls to
GetUIParam. Params, on the other hand, are structures stored directly in the control structure.
These can remain entirely hidden, or they can be managed by GUI elements.  However,
the callbacks associated with the GUI are responsible for keeping the control structure
in synchrony, because calls to GetParam directly access the structure.  ParamFigure()
is provided to generate a window of parameters and associated callbacks; this is a compact
and easily implemented way to provide user-manipulable values.

The Utility directory also contains functions that perform common tasks related to the DAQ
engine.  These do not form a complete interface to the engine; protocols are still responsible
for making direct operations on wc.ai and wc.ao, which can be accessed by including a
"global wc" statement where necessary.  This utility-based interface was chosen to provide
maximum flexibility within protocols, at the expense of a certain amount of duplicated code.
This choice reflects the fact that many protocols will need to access the DAQ engine in specific
ways; for example, the protocol Flasher uses a synchronization signal generated by a
video screen to trigger acquisition and output.  As a result, except for the most trivial
modifications of existing protocols, programmers wishing to extend this toolkit are advised
to learn Matlab's Data Acquisition Toolkit.

As of Release 1.4, a sub-toolkit is included in the Visual directory.  The functions in this
directory generate and display visual stimuli using the Cogent Graphics toolkit.  Again, because
individual protocols will make unique demands, a utility-based approach has been adopted here.

Finally, a collection of analysis fuctions are included in the Analysis directory.  These 
functions were written to address specific analysis needs for the experiments I conducted,
and will undoubtedly need to be extended by anyone planning different experiments.  Of interest,
however, are three major GUI functions.  EpisodeAnalysis displays multiple repeats of an
episodic acquisition, and allows the user to compute statistics like EPSC amplitude, input
resistance and series resistance, on individual or averaged traces.  PrePostAnalysis takes these
statistics as input and plots their time course as individual experiments or as group data.
Finally, STRFGui is used to analyze intracellular responses to visual stimulation, using
common (and pluggable) methods like reverse correlation, PCA, and sparse noise analysis.

---------------------
Conventions:

Main function names are addressed like Java classes, with capital first letters
(e.g. EpisodeAnalysis), while internally defined functions are defined with lowercase first
letters (e.g. openFigure).  Global variables other than wc have been strenuously avoided.
Local variable names should be short but descriptive, and all lower-case.  GUI tags should
also be lowercase.  Because most calls to GUI objects will be through the utility functions,
names can be repeated across modules; however, care should consequently be taken with global
tag searches.

Commonly used structures should be defined in the structures directory, although Matlab provides
no way of enforcing these schemas.

----------------------------
Major revisions:

rel_2-0 - The final R12 release.  All future work will be done in R13, although a branch\
          for bugfixes to the R12 code will be maintained.

rel_1-4 - continued protocol unification.  Visual stimulation routines made their first
          appearance, along with the associated analysis functions.  Major changes were made
          to the storage format of analyzed data.  Old .mat files consisting of combined
          .daq episodes have been replaced with .r0 and .r1 files, depending on whether
          the length of each acquisition needed to be absolutely consistent.  Old files should
          work with some minor adjustments.

rel_1-2 - significant efforts were made to unify protocol structure and eliminate crosstalk.
          SweepAcquired() was eliminated, and function handles became the preferred method
          for callbacks, although the DAQ toolkit in Matlab R12 does not support these natively.
          Additional analysis functions were written

rel_1-0 - initial version provided simple episodic acquisition and analysis.  Very little internal
          consistency among protocols.  Major issues with protocol crosstralk.

          
_____________________________

Protocols:

GapFree.m - A running oscilloscope that displays data from the DAQ.  Currently only
            supports one channel.  Contains some obsolete code that should probably be
            replaced at some point.
            
SealTest.m - A self-contained protocol for measuring the resistance of the electrode.
             Although servicable, the method of calculating input/series resistance
             is far from robust, and it should be updated to support multiple channels
             for multielectrode work
             
Episode.m  - Control episodic acquisition of data where all output and input occurs
             through the DAQ board.  Output through both D/A channels is supported,
             but only in the form of single pulses.  Uses EpisodeStats to plot results.
             
Flasher.m  - Like Episode, manages episodic acquisition of data synchronized to an
             output sequence.  In this protocol, however, stimuli can be presented on
             a screen.  Visual stimuli consist of a group of frames which are flashed
             for a user-specified length of time; the choice of frame is chosen from
             a shuffled sequence so that each frame is presented about the same number
             of times but in a randomized order.  Pulses can be sent through the D/A 
             channels as well.  In order for DAQ operation to be synchronized with the
             video screen, a digital signal must be transmitted to the HwDigital line
             
VisualSequence.m - This protocol supports playing movies on the screen while acquiring
                   data from the DAQ.  Rotation is not currently supported, and for
                   any serious experiments, a separate computer running a more robust
                   graphical toolkit should probably be used.
                   
____________________________                   

Todo:

find way to calculate input resistance, etc more precisely and robustly
fix channel deletion
document code
fix reinitialization code
fix telegraph code in revcorr_led + episode to display real values (or give choice to display raw voltages)
get index of amp from param window (revcorr_led)
